image: alpine:latest
#services:
#  - alpine:latest-dind
stages:          # List of stages for jobs, and their order of execution
  - build-kaniko
  - test
  - release
  - deploy

variables:
  CONTAINER_SHOP_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest
  ROCM_REGISTRY_IMAGE: 'MYIMAGENAME_WITH_URL'
  ROCM_PROJECT_DIR: .
#  KANIKO_DIR: "/kaniko/.docker"

build-with-kaniko:
  stage: build-kaniko       # This job runs in the build stage, which runs first.
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  before_script:
    # - test -d "$KANIKO_DIR" && echo "$KANIKO_DIR Exists" || mkdir -p "$KANIKO_DIR"
    # - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - echo 'end of before script'
  script:
   # - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
#   stage: build
#   script:
#     - docker build -t $CONTAINER_TEST_IMAGE .
#     - docker push $CONTAINER_TEST_IMAGE

test:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - docker pull "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}"
    - docker run "${CI_REGISTRY_IMAGE}:${CI_COMMIT_TAG}" npm test

release-image:   # This job also runs in the test stage.
  stage: release    # It can run at the same time as unit-test-job (in parallel).
  script:
    - docker pull $CI_REGISTRY_IMAGE
    - docker tag $CI_REGISTRY_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE

deploy:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  tags: 
    - shop_front
  script:
    - docker pull $CONTAINER_RELEASE_IMAGE
    - docker run -d -p 2000:2000 $CONTAINER_RELEASE_IMAGE
    - echo "Ishladi"


#image: alpine:latest

#before_script:
#  - echo "before script section"
#  - echo "abdulvoris"
#  - echo "darkweb"

#stages:
#  - build

#build:
#  stage: build
#  script:
#    - echo "ishladi hursandman"
#  tags:
#    - shop_front

#stages:
#  - build

#Build NodeJS APP:
#  stage: build
#  script: 
#    - npm install
#  artifacts:
#    paths:
#      - /home/kali/projects/e-Shop/front/shop_front
