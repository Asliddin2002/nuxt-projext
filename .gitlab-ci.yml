image: alpine:latest
#services:
#  - alpine:latest-dind
stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - release
  - deploy

variables:
  CONTAINER_SHOP_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_RELEASE_IMAGE: $CI_REGISTRY_IMAGE:latest

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build:       # This job runs in the build stage, which runs first.
  stage: build
  script:
    - docker build -t $CONTAINER_TEST_IMAGE .
    - docker push $CONTAINER_TEST_IMAGE

test:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker run $CONTAINER_TEST_IMAGE npm test

release-image:   # This job also runs in the test stage.
  stage: release    # It can run at the same time as unit-test-job (in parallel).
  script:
    - docker pull $CONTAINER_TEST_IMAGE
    - docker tag $CONTAINER_TEST_IMAGE $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE

deploy:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  tags: 
    - shop_front
  script:
    - docker pull $CONTAINER_RELEASE_IMAGE
    - docker run -d -p 2000:2000 $CONTAINER_RELEASE_IMAGE


#image: alpine:latest

#before_script:
#  - echo "before script section"
#  - echo "abdulvoris"
#  - echo "darkweb"

#stages:
#  - build

#build:
#  stage: build
#  script:
#    - echo "ishladi hursandman"
#  tags:
#    - shop_front

#stages:
#  - build

#Build NodeJS APP:
#  stage: build
#  script: 
#    - npm install
#  artifacts:
#    paths:
#      - /home/kali/projects/e-Shop/front/shop_front
